import { Component, OnInit } from '@angular/core';
import { Chart } from 'chart.js';
import { SurveyService } from '../services/survey.service';
import { saveAs , FileSaver} from 'file-saver';
import { UserService } from '../services/user.service';
import { HttpClient } from '@angular/common/http';

/* tslint:disable */
@Component({
	selector: 'app-dashboard',
	templateUrl: './dashboard.component.html',
	styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {

	constructor(private surveyService: SurveyService, private userService: UserService) { }

	surveyId: string;
	title: any = [];
	selectedSurvey: any = [];
	// tslint:disable-next-line:ban-types
	newArray: any = [];
	noFoundBlankUser: string;
	noFoundFilledUser: string;
	survey = [];
	question: any = [];
	myChart: any = 0;
	ctx: any = 0;
	image: any;
	sendMailUsers: any = [];
	blankUserNameId: any = [];
	FilledUserNameId: any = []
	blankFillUsers: any = [];
	SurveyFilledUsers: any = [];
	barChartColor = [
		'rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)',
		'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)',
		'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)',
		'rgba(3, 244, 252,0.2)', 'rgba(99, 148, 238,0.2)',
		'rgba(3, 244, 252,0.2)', 'rgba(177, 252, 3,0.2)'
	]
	ngOnInit() {
		this.getUnderSurvey();
	}

	getUnderSurvey = () => {
		this.surveyId = localStorage.getItem('sid');
		// tslint:disable-next-line:ban-types
		const userName = localStorage.getItem('name');

		this.surveyService.getUnderSurvey(userName)
			.subscribe((result) => {
				this.survey = result;
				this.title = this.survey[0].title;
				this.survey[0].assignees.forEach(e => {
					if (e.response.length === 0) {
						this.blankFillUsers.push(e._id);
						console.log(this.blankFillUsers);
					} else {
						this.SurveyFilledUsers.push(e._id);
						console.log(this.SurveyFilledUsers);
					}

				});

				const multiArray = this.survey[0].assignees.map(x => x.response.map(y => y.response));
				this.gotArray(multiArray);
				this.showChart()
			});
	}

	onchange = (e) => {

		this.newArray = [];
		this.blankFillUsers = [];
		this.SurveyFilledUsers = [];

		this.selectedSurvey = this.survey.find(item => item['_id'] === e);
		console.log(this.selectedSurvey)
		this.title = this.selectedSurvey.title;
		const multiArray = this.selectedSurvey.assignees.map(x => x.response.map(y => y.response));
		this.selectedSurvey.assignees.forEach(e => {
			if (e.response.length === 0) {
				this.blankFillUsers.push(e._id);

			} else {
				this.SurveyFilledUsers.push(e._id);
				console.log('Filled', this.SurveyFilledUsers);
			}
		});

		this.gotArray(multiArray);
		this.showChart();
		this.getBlankUserName();
		this.getFilledUserName();
	}
	r = (e, f) => {
		return e + f;
	}

	showChart = () => {
		if (this.myChart) {
			this.myChart.data.datasets[0].data = this.newArray;
			this.myChart.data.labels = this.question;
			this.myChart.update();

		} else {
			this.ctx = document.getElementById('myChart');
			this.myChart = new Chart(this.ctx, {

				type: 'bar',
				data: {
					labels: this.question,
					datasets: [{
						label: '# of Votes',
						data: this.newArray,
						backgroundColor: this.barChartColor,
						borderColor: this.barChartColor,
						borderWidth: 1
					}]
				},
				options: {
					onAnimationComplete: function done() {
					},
					scales: {
						yAxes: [{
							ticks: {
								min: 0,
								max: 10,
								beginAtZero: true
							}
						}]
					}
				}
			});

		}
	}
	imageDownload(type:string,fromRemote:boolean) {

		this.image = this.ctx.toBlob( (blob, title) => {
			
		return saveAs(blob, `${this.title}.png`)

		});
	

	}

	gotArray = (multiArray) => {
		this.question = [];
		let nullArray = [];
		let myArray = [];
		multiArray.forEach(e => {
			if (e.length === 0) {
				console.log('null');
			} else {
				nullArray.push(e);
			}
		});
		if (nullArray.length === 0) {
			console.log('Survey has no fill data yet')
		} else {

			for (var i = 0; i < nullArray[0].length; i++) {
				var num = 0;
				var length = nullArray.length;
				this.question.push('Question ' + (i + 1))
				// still assuming all arrays have the same amount of numbers
				// tslint:disable-next-line:prefer-for-of
				for (let i2 = 0; i2 < nullArray.length; i2++) {
					num += nullArray[i2][i];
				}
				console.log('num ', length)
				myArray.push(Math.round(num / length));
			}
			this.newArray = [];
			this.newArray.splice(0, this.newArray.length, ...myArray);
			return this.newArray;
		}
	}

	getBlankUserName = () => {
		this.surveyService.getUsername(this.blankFillUsers)
			.subscribe((user) => {
				this.blankUserNameId = user;

			});
	}
	getFilledUserName = () => {
		this.surveyService.getUsername(this.SurveyFilledUsers)
			.subscribe((user) => {
				this.FilledUserNameId = user;

			});
	}
	sendMail = () => {
		console.log(this.blankUserNameId.map(e => e.RishabhId));
		const mailToUser = this.blankUserNameId.map(e => e.RishabhId);
		this.userService.sendMailUser(mailToUser)
			.subscribe((result) => {
				console.log(result);
			})
	}

}

